"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4602],{6153:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"singleton","title":"Singleton","description":"El patr\xf3n de dise\xf1o Singleton es un enfoque creacional que asegura que una clase tenga solo una instancia durante toda la ejecuci\xf3n del programa. Este patr\xf3n controla la creaci\xf3n de objetos, evitando que se creen m\xfaltiples instancias de la misma clase, lo que puede ser \xfatil cuando se necesita un \xfanico punto de acceso a los recursos compartidos, como una base de datos o una configuraci\xf3n global. Adem\xe1s, proporciona un acceso global a la instancia \xfanica, asegurando que todas las partes del sistema usen la misma instancia.","source":"@site/docs/singleton.md","sourceDirName":".","slug":"/singleton","permalink":"/Documentacion_Doc/docs/singleton","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/singleton.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"observer","permalink":"/Documentacion_Doc/docs/observer"},"next":{"title":"strategy","permalink":"/Documentacion_Doc/docs/strategy"}}');var o=a(4848),s=a(8453);const r={},l="Singleton",c={},t=[{value:"\xbfC\xf3mo Funciona?",id:"c\xf3mo-funciona",level:3},{value:"Ventajas del patr\xf3n Singleton",id:"ventajas-del-patr\xf3n-singleton",level:3},{value:"Desventajas del patr\xf3n Singleton",id:"desventajas-del-patr\xf3n-singleton",level:3},{value:"Casos de uso comunes",id:"casos-de-uso-comunes",level:3},{value:"Estructura",id:"estructura",level:3},{value:"Ejemplo practico de codigo:",id:"ejemplo-practico-de-codigo",level:3},{value:"Comparaci\xf3n con otros patrones de dise\xf1o",id:"comparaci\xf3n-con-otros-patrones-de-dise\xf1o",level:3},{value:"Aplicabilidad",id:"aplicabilidad",level:3},{value:"\xbfCuando apicar el patron?",id:"cuando-apicar-el-patron",level:3},{value:"Pasos para implementar el patr\xf3n Singleton",id:"pasos-para-implementar-el-patr\xf3n-singleton",level:3},{value:"Pros y contras del patr\xf3n Singleton",id:"pros-y-contras-del-patr\xf3n-singleton",level:3},{value:"Pros",id:"pros",level:4},{value:"Contras",id:"contras",level:4}];function d(e){const n={blockquote:"blockquote",br:"br",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"singleton",children:"Singleton"})}),"\n",(0,o.jsx)(n.p,{children:"El patr\xf3n de dise\xf1o Singleton es un enfoque creacional que asegura que una clase tenga solo una instancia durante toda la ejecuci\xf3n del programa. Este patr\xf3n controla la creaci\xf3n de objetos, evitando que se creen m\xfaltiples instancias de la misma clase, lo que puede ser \xfatil cuando se necesita un \xfanico punto de acceso a los recursos compartidos, como una base de datos o una configuraci\xf3n global. Adem\xe1s, proporciona un acceso global a la instancia \xfanica, asegurando que todas las partes del sistema usen la misma instancia."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://refactoring.guru/images/patterns/content/singleton/singleton.png?id=108a0b9b5ea5c4426e0afa4504491d6f",alt:""})}),"\n",(0,o.jsx)(n.h3,{id:"c\xf3mo-funciona",children:"\xbfC\xf3mo Funciona?"}),"\n",(0,o.jsx)(n.p,{children:"El patr\xf3n Singleton asegura que una clase tenga solo una instancia durante la ejecuci\xf3n de un programa y proporciona un punto de acceso global a esa instancia. Para lograrlo, utiliza una variable est\xe1tica que mantiene la referencia de la instancia. Si la instancia no ha sido creada a\xfan, el m\xe9todo est\xe1tico la genera; si ya existe, simplemente la devuelve."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"El constructor de la clase se declara privado para evitar que otras clases creen instancias directamente. Solo el m\xe9todo est\xe1tico tiene acceso para crear la instancia y proporcionar acceso a ella."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"En aplicaciones que operan en entornos multihilo, el patr\xf3n Singleton tambi\xe9n implementa mecanismos de sincronizaci\xf3n para garantizar que solo un hilo cree la instancia en simult\xe1neo, evitando problemas de concurrencia."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Este patr\xf3n es ideal cuando se necesita controlar recursos compartidos, como una conexi\xf3n a base de datos o configuraciones globales, ya que asegura que solo haya una instancia accesible desde diferentes partes del sistema."}),"\n",(0,o.jsx)(n.h3,{id:"ventajas-del-patr\xf3n-singleton",children:"Ventajas del patr\xf3n Singleton"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Control de acceso \xfanico"}),"\r\nEl patr\xf3n garantiza que solo haya una instancia de la clase. Esto es particularmente \xfatil cuando necesitas que ciertos recursos compartidos no sean duplicados, como en el caso de las conexiones a bases de datos o los registros de configuraci\xf3n."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Flexibilidad"}),"\r\nAunque el Singleton asegura una \xfanica instancia, todav\xeda permite que dicha instancia sea modificada y configurada seg\xfan sea necesario, lo que otorga flexibilidad para cambiar el comportamiento de la instancia en el futuro."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"F\xe1cil implementaci\xf3n"}),"\r\nImplementar un Singleton es relativamente sencillo. Solo necesitas asegurarte de que la clase tenga un constructor privado y un m\xe9todo est\xe1tico que devuelva la instancia \xfanica."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"desventajas-del-patr\xf3n-singleton",children:"Desventajas del patr\xf3n Singleton"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Dif\xedcil de probar:"}),"\r\nLos Singletons pueden dificultar las pruebas unitarias. Dado que son globales y la instancia est\xe1 controlada dentro de la propia clase, puede ser complicado realizar pruebas aisladas sin que afecte el estado global de la aplicaci\xf3n."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Acoplamiento alto:"}),"\r\nAl ser un punto de acceso global, el uso de Singletons puede incrementar el acoplamiento entre las clases, ya que las clases que lo usan dependen de una instancia global. Esto puede generar problemas si no se gestiona adecuadamente, ya que se pueden crear dependencias dif\xedciles de controlar."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Violaci\xf3n del principio de responsabilidad \xfanica:"}),'\r\nEl patr\xf3n Singleton puede violar el principio de responsabilidad \xfanica (SRP) de la programaci\xf3n orientada a objetos, ya que la clase no solo gestiona la instancia \xfanica, sino que tambi\xe9n puede estar a cargo de una l\xf3gica adicional que la convierte en un "componente global" dif\xedcil de manejar.']}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"casos-de-uso-comunes",children:"Casos de uso comunes"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Cuando se necesita acceder a una configuraci\xf3n com\xfan en toda la aplicaci\xf3n, el Singleton asegura que todos los componentes utilicen la misma instancia."}),"\n",(0,o.jsx)(n.li,{children:"Para evitar m\xfaltiples conexiones simult\xe1neas a una base de datos, el Singleton permite controlar una \xfanica instancia de la conexi\xf3n."}),"\n",(0,o.jsx)(n.li,{children:"En aplicaciones donde se necesita registrar informaci\xf3n de eventos globalmente, el Singleton puede garantizar que se utilice una \xfanica instancia del sistema de logs."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"estructura",children:"Estructura"}),"\n",(0,o.jsxs)(n.p,{children:["En el patr\xf3n Singleton, la clase declara un m\xe9todo est\xe1tico ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.em,{children:"getInstance()"})}),", el cual se utiliza para obtener la \xfanica instancia de la clase. La idea principal es que solo haya una instancia de la clase en todo el sistema, y la forma de acceder a esta instancia es a trav\xe9s de este m\xe9todo est\xe1tico."]}),"\n",(0,o.jsx)(n.p,{children:"El constructor de la clase Singleton debe estar oculto o privado, lo que impide que otros objetos o clases creen nuevas instancias de la clase directamente. De esta manera, la \xfanica forma de acceder al objeto Singleton es llamando al m\xe9todo getInstance(). Este m\xe9todo garantiza que solo se cree una instancia de la clase y que se reutilice esta instancia siempre que sea necesario."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Diagrama diagrama de patr\xf3n de dise\xf1o Singleton"}),"\r\n",(0,o.jsx)(n.img,{src:"https://refactoring.guru/images/patterns/diagrams/singleton/structure-en.png?id=4e4306d3a90f40d74c7a4d2d2506b8ec",alt:"Diagrama"})]}),"\n",(0,o.jsx)(n.h3,{id:"ejemplo-practico-de-codigo",children:"Ejemplo practico de codigo:"}),"\n",(0,o.jsx)(n.p,{children:"En este caso, la clase ConfiguracionApp act\xfaa como un Singleton. La clase no tiene un constructor p\xfablico, por lo que la \xfanica manera de obtener su instancia es mediante el m\xe9todo obtenerConfiguracion. Este m\xe9todo asegura que la configuraci\xf3n sea una sola instancia que se mantenga constante durante la ejecuci\xf3n de la aplicaci\xf3n."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'Clase ConfiguracionApp:\r\n    // Atributo privado est\xe1tico para almacenar la instancia \xfanica\r\n    InstanciaPrivada: ConfiguracionApp\r\n    // Atributos para almacenar la configuraci\xf3n\r\n    AtributosDeConfiguracion: Mapa\r\n\r\n    // Constructor privado para prevenir la creaci\xf3n de instancias desde fuera\r\n    M\xe9todo Constructor():\r\n        Si la instancia no es nula:\r\n            Lanzar excepci\xf3n "Instancia ya existe"\r\n        FinSi\r\n        // Inicializar los atributos de configuraci\xf3n con valores predeterminados\r\n        AtributosDeConfiguracion = { "idioma": "espa\xf1ol", "modo": "oscuro" }\r\n\r\n    // M\xe9todo est\xe1tico para obtener la instancia de la clase\r\n    M\xe9todo obtenerConfiguracion():\r\n        Si la instancia es nula:\r\n            Crear nueva instancia de ConfiguracionApp\r\n        FinSi\r\n        Devolver la instancia\r\n\r\n    // M\xe9todo para obtener un valor de configuraci\xf3n\r\n    M\xe9todo obtenerValorConfiguracion(clave):\r\n        Devolver AtributosDeConfiguracion[clave]\r\n\r\n    // M\xe9todo para actualizar la configuraci\xf3n\r\n    M\xe9todo actualizarConfiguracion(clave, valor):\r\n        AtributosDeConfiguracion[clave] = valor\r\nFinClase\r\n\r\n// Uso del Singleton\r\nconfiguracion1 = ConfiguracionApp.obtenerConfiguracion()\r\nconfiguracion1.actualizarConfiguracion("idioma", "ingl\xe9s")\r\n\r\nconfiguracion2 = ConfiguracionApp.obtenerConfiguracion()\r\n// configuracion1 y configuracion2 son la misma instancia, se mantienen sincronizadas\r\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"comparaci\xf3n-con-otros-patrones-de-dise\xf1o",children:"Comparaci\xf3n con otros patrones de dise\xf1o"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Singleton vs Factory Method:\r\nEl patr\xf3n ",(0,o.jsx)(n.strong,{children:"Factory Method"})," se utiliza para crear objetos sin especificar la clase exacta del objeto que se va a crear. A diferencia del Singleton, que asegura una sola instancia de una clase, el Factory Method puede crear diferentes instancias, pero no garantiza que solo haya una."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Singleton vs Prototype:\r\nEl patr\xf3n ",(0,o.jsx)(n.strong,{children:"Prototype"})," crea nuevos objetos copiando un objeto existente en lugar de crear instancias de una clase. A diferencia del Singleton, el Prototype puede generar m\xfaltiples instancias, lo que lo hace m\xe1s flexible en ciertos casos, pero menos \xfatil cuando solo se necesita una instancia \xfanica."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"aplicabilidad",children:"Aplicabilidad"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Utiliza el patr\xf3n Singleton cuando una clase de tu programa tan solo deba tener una instancia disponible para todos los clientes; por ejemplo, un \xfanico objeto de base de datos compartido por distintas partes del programa."}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"El patr\xf3n Singleton deshabilita el resto de las maneras de crear objetos de una clase, excepto el m\xe9todo especial de creaci\xf3n. Este m\xe9todo crea un nuevo objeto, o bien devuelve uno existente si ya ha sido creado."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"cuando-apicar-el-patron",children:"\xbfCuando apicar el patron?"}),"\n",(0,o.jsx)(n.p,{children:"Utiliza el patr\xf3n Singleton cuando necesites un control m\xe1s estricto de las variables globales."}),"\n",(0,o.jsx)(n.p,{children:"Al contrario que las variables globales, el patr\xf3n Singleton garantiza que haya una \xfanica instancia de una clase. A excepci\xf3n de la propia clase Singleton, nada puede sustituir la instancia en cach\xe9."}),"\n",(0,o.jsxs)(n.p,{children:["Ten en cuenta que siempre podr\xe1s ajustar esta limitaci\xf3n y permitir la creaci\xf3n de cierto n\xfamero de instancias Singleton. La \xfanica parte del c\xf3digo que requiere cambios es el cuerpo del m\xe9todo ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.em,{children:"getInstance"})}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"pasos-para-implementar-el-patr\xf3n-singleton",children:"Pasos para implementar el patr\xf3n Singleton"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"A\xf1ade un campo est\xe1tico privado"})," a la clase para almacenar la instancia Singleton."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Declara un m\xe9todo de creaci\xf3n est\xe1tico p\xfablico"})," para obtener la instancia Singleton."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Implementa una inicializaci\xf3n diferida dentro del m\xe9todo est\xe1tico:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Crea un nuevo objeto en su primera llamada y col\xf3calo dentro del campo est\xe1tico."}),"\n",(0,o.jsx)(n.li,{children:"El m\xe9todo deber\xe1 devolver siempre esa instancia en todas las llamadas siguientes."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Declara el constructor de clase como privado"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"El m\xe9todo est\xe1tico de la clase podr\xe1 invocar al constructor."}),"\n",(0,o.jsx)(n.li,{children:"Los otros objetos no podr\xe1n hacerlo."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Repasa el c\xf3digo cliente"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Sustituye todas las llamadas directas al constructor de la instancia Singleton por llamadas a su m\xe9todo de creaci\xf3n est\xe1tico."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"pros-y-contras-del-patr\xf3n-singleton",children:"Pros y contras del patr\xf3n Singleton"}),"\n",(0,o.jsx)(n.h4,{id:"pros",children:"Pros"}),"\n",(0,o.jsxs)(n.p,{children:["\u2705 Puedes tener la certeza de que una clase tiene una \xfanica instancia.",(0,o.jsx)(n.br,{}),"\n","\u2705 Obtienes un punto de acceso global a dicha instancia.",(0,o.jsx)(n.br,{}),"\n","\u2705 El objeto Singleton solo se inicializa cuando se requiere por primera vez."]}),"\n",(0,o.jsx)(n.h4,{id:"contras",children:"Contras"}),"\n",(0,o.jsxs)(n.p,{children:["\u274c Vulnera el Principio de responsabilidad \xfanica. El patr\xf3n resuelve dos problemas al mismo tiempo.",(0,o.jsx)(n.br,{}),"\n","\u274c Puede enmascarar un mal dise\xf1o, por ejemplo, cuando los componentes del programa saben demasiado los unos sobre los otros.",(0,o.jsx)(n.br,{}),"\n","\u274c Requiere un tratamiento especial en un entorno con m\xfaltiples hilos de ejecuci\xf3n, para evitar que varios hilos creen un objeto Singleton varias veces.",(0,o.jsx)(n.br,{}),"\n","\u274c Puede resultar complicado realizar pruebas unitarias del c\xf3digo cliente del Singleton:\r\nMuchos frameworks de prueba dependen de la herencia para crear objetos simulados (mock objects)."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Debido a que la clase Singleton es privada y los m\xe9todos est\xe1ticos no se pueden sobrescribir en la mayor\xeda de los lenguajes, realizar pruebas unitarias puede ser un desaf\xedo."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Esto podr\xeda implicar buscar formas originales de simular el Singleton, no escribir pruebas, o simplemente evitar usar este patr\xf3n."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"En general el Singleton es una herramienta poderosa para garantizar que una clase tenga una \xfanica instancia en todo el sistema, proporcionando un punto de acceso global a esta instancia. Aunque tiene ventajas claras, como la inicializaci\xf3n controlada y el acceso centralizado, tambi\xe9n puede generar problemas de dise\xf1o y pruebas si no se utiliza correctamente. Su implementaci\xf3n debe ser cuidadosa, especialmente en entornos multihilo. Como cualquier patr\xf3n, es importante evaluar si su uso es necesario y adecuado para el contexto del proyecto."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>l});var i=a(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);
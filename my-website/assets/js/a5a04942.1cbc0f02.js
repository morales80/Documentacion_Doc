"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7069],{9301:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"observer","title":"observer","description":"Tambi\xe9n llamado: Observador, Publicaci\xf3n-Suscripci\xf3n, Modelo-patr\xf3n, Event-Subscriber, Listener.","source":"@site/docs/observer.md","sourceDirName":".","slug":"/observer","permalink":"/Documentacion_Doc/docs/observer","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/observer.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"command","permalink":"/Documentacion_Doc/docs/command"},"next":{"title":"Singleton","permalink":"/Documentacion_Doc/docs/singleton"}}');var i=r(4848),a=r(8453);const o={},t=void 0,c={},l=[{value:"Prop\xf3sito",id:"prop\xf3sito",level:3},{value:"Analog\xeda en el mundo real",id:"analog\xeda-en-el-mundo-real",level:3},{value:"Estructura",id:"estructura",level:3},{value:"Pseudoc\xf3digo",id:"pseudoc\xf3digo",level:3},{value:"C\xf3mo implementarlo",id:"c\xf3mo-implementarlo",level:3},{value:"Pros",id:"pros",level:3},{value:"Contras",id:"contras",level:3}];function d(e){const n={code:"code",em:"em",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tambi\xe9n llamado"}),": ",(0,i.jsx)(n.em,{children:"Observador, Publicaci\xf3n-Suscripci\xf3n, Modelo-patr\xf3n, Event-Subscriber, Listener."})]}),"\n",(0,i.jsx)(n.h3,{id:"prop\xf3sito",children:"Prop\xf3sito"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Observer es un patr\xf3n de dise\xf1o de comportamiento que te permite definir un mecanismo de suscripci\xf3n para notificar a varios objetos sobre cualquier evento que le suceda al objeto que est\xe1n observando."})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://www.hollywoodreporter.com/wp-content/uploads/2015/10/tvwriter.jpg?w=1500",alt:"Observer"})}),"\n",(0,i.jsx)(n.h3,{id:"analog\xeda-en-el-mundo-real",children:"Analog\xeda en el mundo real"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://refactoring.guru/images/patterns/content/observer/observer-comic-2-es.png?id=27c5c4513d9c52b4198ef61d32b4e201",alt:"Analogia"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Si te suscribes a un peri\xf3dico o una revista, ya no necesitar\xe1s ir a la tienda a comprobar si el siguiente n\xfamero est\xe1 disponible. En lugar de eso, el notificador env\xeda nuevos n\xfameros directamente a tu buz\xf3n justo despu\xe9s de la publicaci\xf3n, o incluso antes."})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"El notificador mantiene una lista de suscriptores y sabe qu\xe9 revistas les interesan. Los suscriptores pueden abandonar la lista en cualquier momento si quieren que el notificador deje de enviarles nuevos n\xfameros."})}),"\n",(0,i.jsx)(n.h3,{id:"estructura",children:"Estructura"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://refactoring.guru/images/patterns/diagrams/observer/structure-indexed.png?id=2ca2c123503ede860740af2a22bc4b4d",alt:"Estructura"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"El Notificador env\xeda eventos de inter\xe9s a otros objetos. Esos eventos ocurren cuando el notificador cambia su estado o ejecuta algunos comportamientos. Los notificadores contienen una infraestructura de suscripci\xf3n que permite a nuevos y antiguos suscriptores abandonar la lista."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Cuando sucede un nuevo evento, el notificador recorre la lista de suscripci\xf3n e invoca el m\xe9todo de notificaci\xf3n declarado en la interfaz suscriptora en cada objeto suscriptor."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"La interfaz Suscriptora declara la interfaz de notificaci\xf3n. En la mayor\xeda de los casos, consiste en un \xfanico m\xe9todo actualizar. El m\xe9todo puede tener varios par\xe1metros que permitan al notificador pasar algunos detalles del evento junto a la actualizaci\xf3n."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Los Suscriptores Concretos realizan algunas acciones en respuesta a las notificaciones emitidas por el notificador. Todas estas clases deben implementar la misma interfaz de forma que el notificador no est\xe9 acoplado a clases concretas."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Normalmente, los suscriptores necesitan cierta informaci\xf3n contextual para manejar correctamente la actualizaci\xf3n. Por este motivo, a menudo los notificadores pasan cierta informaci\xf3n de contexto como argumentos del m\xe9todo de notificaci\xf3n. El notificador puede pasarse a s\xed mismo como argumento, dejando que los suscriptores extraigan la informaci\xf3n necesaria directamente."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"El Cliente crea objetos tipo notificador y suscriptor por separado y despu\xe9s registra a los suscriptores para las actualizaciones del notificador."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pseudoc\xf3digo",children:"Pseudoc\xf3digo"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"En este ejemplo, el patr\xf3n Observer permite al objeto editor de texto notificar a otros objetos tipo servicio sobre los cambios en su estado."})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://refactoring.guru/images/patterns/diagrams/observer/example.png?id=6d0603ab5a00e4463b81d9639cd746a2",alt:"Pseudocodigo"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"La lista de suscriptores se compila din\xe1micamente: los objetos pueden empezar o parar de escuchar notificaciones durante el tiempo de ejecuci\xf3n, dependiendo del comportamiento que desees para tu aplicaci\xf3n."})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"En esta implementaci\xf3n, la clase editora no mantiene la lista de suscripci\xf3n por s\xed misma. Delega este trabajo al objeto ayudante especial dedicado justo a eso. Puedes actualizar ese objeto para que sirva como despachador centralizado de eventos, dejando que cualquier objeto act\xfae como notificador."})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"A\xf1adir nuevos suscriptores al programa no requiere cambios en clases notificadoras existentes, siempre y cuando trabajen con todos los suscriptores a trav\xe9s de la misma interfaz."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-//",metastring:"La clase notificadora base incluye c\xf3digo de gesti\xf3n de",children:'// suscripciones y m\xe9todos de notificaci\xf3n.\r\nclass EventManager is\r\n    private field listeners: hash map of event types and listeners\r\n\r\n    method subscribe(eventType, listener) is\r\n        listeners.add(eventType, listener)\r\n\r\n    method unsubscribe(eventType, listener) is\r\n        listeners.remove(eventType, listener)\r\n\r\n    method notify(eventType, data) is\r\n        foreach (listener in listeners.of(eventType)) do\r\n            listener.update(data)\r\n\r\n// El notificador concreto contiene l\xf3gica de negocio real, de\r\n// inter\xe9s para algunos suscriptores. Podemos derivar esta clase\r\n// de la notificadora base, pero esto no siempre es posible en\r\n// el mundo real porque puede que la notificadora concreta sea\r\n// ya una subclase. En este caso, puedes modificar la l\xf3gica de\r\n// la suscripci\xf3n con composici\xf3n, como hicimos aqu\xed.\r\nclass Editor is\r\n    public field events: EventManager\r\n    private field file: File\r\n\r\n    constructor Editor() is\r\n        events = new EventManager()\r\n\r\n    // Los m\xe9todos de la l\xf3gica de negocio pueden notificar los\r\n    // cambios a los suscriptores.\r\n    method openFile(path) is\r\n        this.file = new File(path)\r\n        events.notify("open", file.name)\r\n\r\n    method saveFile() is\r\n        file.write()\r\n        events.notify("save", file.name)\r\n\r\n    // ...\r\n\r\n\r\n// Aqu\xed est\xe1 la interfaz suscriptora. Si tu lenguaje de\r\n// programaci\xf3n soporta tipos funcionales, puedes sustituir toda\r\n// la jerarqu\xeda suscriptora por un grupo de funciones.\r\n\r\n\r\ninterface EventListener is\r\n    method update(filename)\r\n\r\n// Los suscriptores concretos reaccionan a las actualizaciones\r\n// emitidas por el notificador al que est\xe1n unidos.\r\nclass LoggingListener implements EventListener is\r\n    private field log: File\r\n    private field message: string\r\n\r\n    constructor LoggingListener(log_filename, message) is\r\n        this.log = new File(log_filename)\r\n        this.message = message\r\n\r\n    method update(filename) is\r\n        log.write(replace(\'%s\',filename,message))\r\n\r\nclass EmailAlertsListener implements EventListener is\r\n    private field email: string\r\n    private field message: string\r\n\r\n    constructor EmailAlertsListener(email, message) is\r\n        this.email = email\r\n        this.message = message\r\n\r\n    method update(filename) is\r\n        system.email(email, replace(\'%s\',filename,message))\r\n\r\n\r\n// Una  aplicaci\xf3n puede configurar notificadores y suscriptores\r\n// durante el tiempo de ejecuci\xf3n.\r\nclass Application is\r\n    method config() is\r\n        editor = new Editor()\r\n\r\n        logger = new LoggingListener(\r\n            "/path/to/log.txt",\r\n            "Someone has opened the file: %s")\r\n        editor.events.subscribe("open", logger)\r\n\r\n        emailAlerts = new EmailAlertsListener(\r\n            "admin@example.com",\r\n            "Someone has changed the file: %s")\r\n        editor.events.subscribe("save", emailAlerts)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"c\xf3mo-implementarlo",children:"C\xf3mo implementarlo"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Repasa tu l\xf3gica de negocio e intenta dividirla en dos partes: la funcionalidad central, independiente del resto de c\xf3digo, actuar\xe1 como notificador; el resto se convertir\xe1 en un grupo de clases suscriptoras."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Declara la interfaz suscriptora. Como m\xednimo, deber\xe1 declarar un \xfanico m\xe9todo actualizar."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Declara la interfaz notificadora y describe un par de m\xe9todos para a\xf1adir y eliminar de la lista un objeto suscriptor. Recuerda que los notificadores deben trabajar con suscriptores \xfanicamente a trav\xe9s de la interfaz suscriptora."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Crea clases notificadoras concretas. Cada vez que suceda algo importante dentro de una notificadora, deber\xe1 notificar a todos sus suscriptores."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://th.bing.com/th/id/R.cf6415b099a82395399c3c8b57aa1940?rik=rGU9Bs47BwSNlg&pid=ImgRaw&r=0",alt:"implementacion"})}),"\n",(0,i.jsx)(n.h3,{id:"pros",children:"Pros"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Principio de abierto/cerrado. Puedes introducir nuevas clases suscriptoras sin tener que cambiar el c\xf3digo de la notificadora (y viceversa si hay una interfaz notificadora)."})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Puedes establecer relaciones entre objetos durante el tiempo de ejecuci\xf3n."})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"contras",children:"Contras"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.em,{children:"Los suscriptores son notificados en un orden aleatorio."})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://th.bing.com/th/id/R.2e07242a2094f7bfff7e7e8578067be7?rik=OFXf6sDZs6lvQQ&pid=ImgRaw&r=0",alt:"pros y contras"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>t});var s=r(6540);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);
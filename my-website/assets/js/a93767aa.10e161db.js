"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3932],{6014:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"PATRONES DE DISE\xd1O","href":"/Documentacion_Doc/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"Builder","href":"/Documentacion_Doc/docs/Builder","docId":"Builder","unlisted":false},{"type":"link","label":"Factory Method","href":"/Documentacion_Doc/docs/Factory_Method","docId":"Factory_Method","unlisted":false},{"type":"link","label":"State","href":"/Documentacion_Doc/docs/State","docId":"State","unlisted":false},{"type":"link","label":"Template Method","href":"/Documentacion_Doc/docs/TemplateMethod","docId":"TemplateMethod","unlisted":false},{"type":"link","label":"Visitor","href":"/Documentacion_Doc/docs/Visitor","docId":"Visitor","unlisted":false},{"type":"link","label":"chain_off_responsability","href":"/Documentacion_Doc/docs/chain_off_responsability","docId":"chain_off_responsability","unlisted":false},{"type":"link","label":"command","href":"/Documentacion_Doc/docs/command","docId":"command","unlisted":false},{"type":"link","label":"observer","href":"/Documentacion_Doc/docs/observer","docId":"observer","unlisted":false},{"type":"link","label":"Singleton","href":"/Documentacion_Doc/docs/singleton","docId":"singleton","unlisted":false},{"type":"link","label":"strategy","href":"/Documentacion_Doc/docs/strategy","docId":"strategy","unlisted":false}]},"docs":{"Builder":{"id":"Builder","title":"Builder","description":"Builder es un patr\xf3n de dise\xf1o creacional que nos permite construir objetos complejos paso a paso. El patr\xf3n nos permite producir distintos tipos y representaciones de un objeto empleando el mismo c\xf3digo de construcci\xf3n.","sidebar":"tutorialSidebar"},"chain_off_responsability":{"id":"chain_off_responsability","title":"chain_off_responsability","description":"El patr\xf3n Chain of Responsibility es una soluci\xf3n de dise\xf1o que aborda la distribuci\xf3n din\xe1mica de responsabilidades en sistemas complejos. Este enfoque permite procesar solicitudes mediante una cadena de manejadores, donde cada uno eval\xfaa si puede resolver el problema o pasarlo al siguiente elemento en la secuencia. Este modelo fomenta el desacoplamiento entre los emisores y receptores de solicitudes, mejorando la flexibilidad y modularidad del c\xf3digo. En esta introducci\xf3n exploraremos c\xf3mo funciona este patr\xf3n, su utilidad en la programaci\xf3n y ejemplos pr\xe1cticos para entender su implementaci\xf3n y ventajas.","sidebar":"tutorialSidebar"},"command":{"id":"command","title":"command","description":"Tambi\xe9n llamado: Comando, Orden, Action, Transaction","sidebar":"tutorialSidebar"},"Factory_Method":{"id":"Factory_Method","title":"Factory Method","description":"El Factory Method es un patr\xf3n de dise\xf1o creacional que define una interfaz en una clase base para la creaci\xf3n de objetos, delegando a las subclases la decisi\xf3n sobre qu\xe9 tipo de objeto debe instanciarse. Este enfoque permite que las subclases alteren el tipo de objetos creados sin modificar la estructura o el comportamiento general del sistema.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"PATRONES DE DISE\xd1O","description":"Los patrones de dise\xf1o (design patterns) son soluciones","sidebar":"tutorialSidebar"},"observer":{"id":"observer","title":"observer","description":"Tambi\xe9n llamado: Observador, Publicaci\xf3n-Suscripci\xf3n, Modelo-patr\xf3n, Event-Subscriber, Listener.","sidebar":"tutorialSidebar"},"singleton":{"id":"singleton","title":"Singleton","description":"El patr\xf3n de dise\xf1o Singleton es un enfoque creacional que asegura que una clase tenga solo una instancia durante toda la ejecuci\xf3n del programa. Este patr\xf3n controla la creaci\xf3n de objetos, evitando que se creen m\xfaltiples instancias de la misma clase, lo que puede ser \xfatil cuando se necesita un \xfanico punto de acceso a los recursos compartidos, como una base de datos o una configuraci\xf3n global. Adem\xe1s, proporciona un acceso global a la instancia \xfanica, asegurando que todas las partes del sistema usen la misma instancia.","sidebar":"tutorialSidebar"},"State":{"id":"State","title":"State","description":"State es un patr\xf3n de dise\xf1o de comportamiento que permite a un objeto alterar su comportamiento cuando su estado interno cambia. Parece como si el objeto cambiara su clase.","sidebar":"tutorialSidebar"},"strategy":{"id":"strategy","title":"strategy","description":"Tambi\xe9n llamado: Estrategia","sidebar":"tutorialSidebar"},"TemplateMethod":{"id":"TemplateMethod","title":"Template Method","description":"El m\xe9todo de plantilla es un patr\xf3n de dise\xf1o de comportamiento que define el esqueleto de un algoritmo en la superclase, pero permite que las subclases invaliden pasos espec\xedficos del algoritmo sin cambiar su estructura.","sidebar":"tutorialSidebar"},"Visitor":{"id":"Visitor","title":"Visitor","description":"Visitor es un patr\xf3n de dise\xf1o de comportamiento que te permite separar algoritmos de los objetos sobre los que operan.","sidebar":"tutorialSidebar"}}}}')}}]);
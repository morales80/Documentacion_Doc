"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6226],{6326:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"State","title":"State","description":"State es un patr\xf3n de dise\xf1o de comportamiento que permite a un objeto alterar su comportamiento cuando su estado interno cambia. Parece como si el objeto cambiara su clase.","source":"@site/docs/State.md","sourceDirName":".","slug":"/State","permalink":"/Documentacion_Doc/docs/State","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/State.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Factory Method","permalink":"/Documentacion_Doc/docs/Factory_Method"},"next":{"title":"Template Method","permalink":"/Documentacion_Doc/docs/TemplateMethod"}}');var s=n(4848),r=n(8453);const o={},i="State",d={},c=[{value:"Prop\xf3sito",id:"prop\xf3sito",level:2},{value:"Caracter\xedsticas",id:"caracter\xedsticas",level:3},{value:"Estas son algunas ventajas y desventajas de nuestro patr\xf3n de dise\xf1o de State",id:"estas-son-algunas-ventajas-y-desventajas-de-nuestro-patr\xf3n-de-dise\xf1o-de-state",level:3},{value:"Analog\xeda del Patr\xf3n State",id:"analog\xeda-del-patr\xf3n-state",level:3},{value:"C\xf3digo de Implementaci\xf3n",id:"c\xf3digo-de-implementaci\xf3n",level:3}];function l(e){const a={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"state",children:"State"})}),"\n",(0,s.jsx)(a.p,{children:"State es un patr\xf3n de dise\xf1o de comportamiento que permite a un objeto alterar su comportamiento cuando su estado interno cambia. Parece como si el objeto cambiara su clase."}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.img,{src:"https://refactoring.guru/images/patterns/content/state/state-es.png?id=03f2a3a86f4b58cc21b4c8c152d6c0ec",alt:"Imagen de ejemplo"})}),"\n",(0,s.jsx)(a.h2,{id:"prop\xf3sito",children:"Prop\xf3sito"}),"\n",(0,s.jsx)(a.p,{children:"Es gestionar el estado de un objeto y c\xf3mo afecta su comportamiento de una manera m\xe1s flexible y organizada. En lugar de tener c\xf3digo condicional en el objeto que maneja su estado, el patr\xf3n State permite delegar cada estado a una clase propia que encapsula el comportamiento correspondiente a ese estado."}),"\n",(0,s.jsx)(a.h3,{id:"caracter\xedsticas",children:"Caracter\xedsticas"}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsx)(a.li,{children:"Permite modificar el comportamiento de un objeto seg\xfan su estado."}),"\n",(0,s.jsx)(a.li,{children:"Desacopla el comportamiento del objeto de su implementaci\xf3n."}),"\n",(0,s.jsx)(a.li,{children:"Extrae los comportamientos relacionados con el estado y los coloca en clases de estado separadas."}),"\n",(0,s.jsx)(a.li,{children:"Permite cambiar el comportamiento del objeto en tiempo de ejecuci\xf3n."}),"\n",(0,s.jsx)(a.li,{children:"Obliga al objeto original a delegar el trabajo a una instancia de las clases de estado.git"}),"\n"]}),"\n",(0,s.jsx)(a.h3,{id:"estas-son-algunas-ventajas-y-desventajas-de-nuestro-patr\xf3n-de-dise\xf1o-de-state",children:"Estas son algunas ventajas y desventajas de nuestro patr\xf3n de dise\xf1o de State"}),"\n",(0,s.jsxs)(a.table,{children:[(0,s.jsx)(a.thead,{children:(0,s.jsxs)(a.tr,{children:[(0,s.jsx)(a.th,{children:(0,s.jsx)(a.strong,{children:"Ventajas"})}),(0,s.jsx)(a.th,{children:(0,s.jsx)(a.strong,{children:"Desventajas"})})]})}),(0,s.jsxs)(a.tbody,{children:[(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.strong,{children:"Mejora la legibilidad"}),": Al encapsular los estados en clases separadas, el c\xf3digo es m\xe1s f\xe1cil de leer y entender."]}),(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.strong,{children:"Complejidad adicional"}),": La implementaci\xf3n del patr\xf3n puede agregar complejidad extra al sistema, especialmente si hay muchos estados."]})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.strong,{children:"Facilita la extensi\xf3n"}),": Nuevos estados pueden agregarse sin modificar el c\xf3digo existente, lo que sigue el principio de abierto/cerrado."]}),(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.strong,{children:"Demasiados objetos"}),": En sistemas con muchos estados, puede haber una proliferaci\xf3n de clases, lo que lleva a un aumento en el n\xfamero de objetos."]})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.strong,{children:"Reduce el acoplamiento"}),": Cada estado se maneja de forma independiente, lo que reduce el acoplamiento entre clases."]}),(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.strong,{children:"Posible confusi\xf3n"}),": Puede ser dif\xedcil gestionar la transici\xf3n entre los diferentes estados si no se implementa correctamente."]})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.strong,{children:"Permite cambios din\xe1micos de estado"}),": El patr\xf3n facilita la transici\xf3n entre diferentes estados en tiempo de ejecuci\xf3n, permitiendo un comportamiento flexible."]}),(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.strong,{children:"Sobrecarga de mantenimiento"}),": Si no se controla bien, la cantidad de estados y transiciones puede generar una sobrecarga en el mantenimiento del sistema."]})]}),(0,s.jsxs)(a.tr,{children:[(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.strong,{children:"Facilita la depuraci\xf3n"}),": Al tener clases que representan estados, se puede aislar m\xe1s f\xe1cilmente el comportamiento en cada estado."]}),(0,s.jsxs)(a.td,{children:[(0,s.jsx)(a.strong,{children:"Sobrecarga en peque\xf1os proyectos"}),": En proyectos simples, el patr\xf3n puede ser innecesario, agregando una complejidad innecesaria."]})]})]})]}),"\n",(0,s.jsx)(a.h3,{id:"analog\xeda-del-patr\xf3n-state",children:"Analog\xeda del Patr\xf3n State"}),"\n",(0,s.jsxs)(a.p,{children:['Imagina que tienes una m\xe1quina expendedora de bebidas. Esta m\xe1quina tiene varios estados: "Esperando Moneda", "Esperando Selecci\xf3n de Bebida", ',(0,s.jsx)(a.strong,{children:'"Entregando Bebida", y "Vendiendo".'})," Cada uno de estos estados tiene comportamientos diferentes y depende de la acci\xf3n del usuario."]}),"\n",(0,s.jsxs)(a.ul,{children:["\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Esperando Moneda:"})," La m\xe1quina est\xe1 esperando que pongas una moneda. En este estado, la m\xe1quina no puede entregar bebidas ni hacer nada m\xe1s. Solo espera una acci\xf3n."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Esperando Selecci\xf3n de Bebida:"})," Una vez que la m\xe1quina recibe la moneda, cambia a este estado, donde ahora puede tomar tu selecci\xf3n. En este estado, puedes elegir entre diferentes opciones de bebidas."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Entregando Bebida:"})," Despu\xe9s de que haces la selecci\xf3n, la m\xe1quina pasa a este estado y entrega la bebida que elegiste."]}),"\n",(0,s.jsxs)(a.li,{children:[(0,s.jsx)(a.strong,{children:"Vendiendo:"})," Si la m\xe1quina est\xe1 fuera de servicio, se cambia a este estado donde no puedes usarla hasta que se repare."]}),"\n"]}),"\n",(0,s.jsx)(a.p,{children:"Cada estado es responsable de una parte espec\xedfica de la m\xe1quina, y puede cambiar a otro estado dependiendo de las interacciones del usuario. La m\xe1quina no intenta hacer todo al mismo tiempo, sino que cambia de estado para gestionar de forma eficiente su funcionamiento."}),"\n",(0,s.jsx)(a.h3,{id:"c\xf3digo-de-implementaci\xf3n",children:"C\xf3digo de Implementaci\xf3n"}),"\n",(0,s.jsx)(a.p,{children:"En este ejemplo, el patr\xf3n State permite a los mismos controles del reproductor de medios comportarse de forma diferente, dependiendo del estado actual de reproducci\xf3n."}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.img,{src:"https://refactoring.guru/images/patterns/diagrams/state/example.png?id=1ffdb109b3ebb85d223b9d1651d2034c",alt:"Imagen de ejemplo"})}),"\n",(0,s.jsx)(a.p,{children:(0,s.jsx)(a.em,{children:"Ejemplo de cambio del comportamiento de un objeto con objetos de estado."})}),"\n",(0,s.jsx)(a.p,{children:"El objeto principal del reproductor siempre est\xe1 vinculado a un objeto de estado que realiza la mayor parte del trabajo del reproductor. Algunas acciones sustituyen el objeto de estado actual del reproductor por otro, lo cual cambia la forma en la que el reproductor reacciona a las interacciones del usuario."}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-bash",children:"// La clase ReproductordeAudio act\xfaa como un contexto. Tambi\xe9n\r\n// mantiene una referencia a una instancia de una de las clases\r\n// estado que representa el estado actual del reproductor de\r\n// audio.\r\nclass AudioPlayer is\r\n    field state: State\r\n    field UI, volume, playlist, currentSong\r\n\r\n    constructor AudioPlayer() is\r\n        this.state = new ReadyState(this)\r\n\r\n        // El contexto delega la gesti\xf3n de entradas del usuario\r\n        // a un objeto de estado. Naturalmente, el resultado\r\n        // depende del estado que est\xe9 activo ahora, ya que cada\r\n        // estado puede gestionar las entradas de manera\r\n        // diferente.\r\n        UI = new UserInterface()\r\n        UI.lockButton.onClick(this.clickLock)\r\n        UI.playButton.onClick(this.clickPlay)\r\n        UI.nextButton.onClick(this.clickNext)\r\n        UI.prevButton.onClick(this.clickPrevious)\r\n\r\n    // Otros objetos deben ser capaces de cambiar el estado\r\n    // activo del reproductor.\r\n    method changeState(state: State) is\r\n        this.state = state\r\n\r\n    // Los m\xe9todos UI delegan la ejecuci\xf3n al estado activo.\r\n    method clickLock() is\r\n        state.clickLock()\r\n    method clickPlay() is\r\n        state.clickPlay()\r\n    method clickNext() is\r\n        state.clickNext()\r\n    method clickPrevious() is\r\n        state.clickPrevious()\r\n\r\n    // Un estado puede invocar algunos m\xe9todos del servicio en\r\n    // el contexto.\r\n    method startPlayback() is\r\n        // ...\r\n    method stopPlayback() is\r\n        // ...\r\n    method nextSong() is\r\n        // ...\r\n    method previousSong() is\r\n        // ...\r\n    method fastForward(time) is\r\n        // ...\r\n    method rewind(time) is\r\n        // ...\r\n\r\n\r\n// La clase estado base declara m\xe9todos que todos los estados\r\n// concretos deben implementar, y tambi\xe9n proporciona una\r\n// referencia inversa al objeto de contexto asociado con el\r\n// estado. Los estados pueden utilizar la referencia inversa\r\n// para dirigir el contexto a otro estado.\r\nabstract class State is\r\n    protected field player: AudioPlayer\r\n\r\n    // El contexto se pasa a s\xed mismo a trav\xe9s del constructor\r\n    // del estado. Esto puede ayudar al estado a extraer\r\n    // informaci\xf3n de contexto \xfatil si la necesita.\r\n    constructor State(player) is\r\n        this.player = player\r\n\r\n    abstract method clickLock()\r\n    abstract method clickPlay()\r\n    abstract method clickNext()\r\n    abstract method clickPrevious()\r\n\r\n\r\n// Los estados concretos implementan varios comportamientos\r\n// asociados a un estado del contexto.\r\nclass LockedState extends State is\r\n\r\n    // Cuando desbloqueas a un jugador bloqueado, puede asumir\r\n    // uno de dos estados.\r\n    method clickLock() is\r\n        if (player.playing)\r\n            player.changeState(new PlayingState(player))\r\n        else\r\n            player.changeState(new ReadyState(player))\r\n\r\n    method clickPlay() is\r\n        // Bloqueado, no hace nada.\r\n\r\n    method clickNext() is\r\n        // Bloqueado, no hace nada.\r\n\r\n    method clickPrevious() is\r\n        // Bloqueado, no hace nada.\r\n\r\n// Tambi\xe9n pueden disparar transiciones de estado en el\r\n// contexto.\r\nclass ReadyState extends State is\r\n    method clickLock() is\r\n        player.changeState(new LockedState(player))\r\n\r\n    method clickPlay() is\r\n        player.startPlayback()\r\n        player.changeState(new PlayingState(player))\r\n\r\n    method clickNext() is\r\n        player.nextSong()\r\n\r\n    method clickPrevious() is\r\n        player.previousSong()\r\n\r\n\r\nclass PlayingState extends State is\r\n    method clickLock() is\r\n        player.changeState(new LockedState(player))\r\n\r\n    method clickPlay() is\r\n        player.stopPlayback()\r\n        player.changeState(new ReadyState(player))\r\n\r\n    method clickNext() is\r\n        if (event.doubleclick)\r\n            player.nextSong()\r\n        else\r\n            player.fastForward(5)\r\n\r\n    method clickPrevious() is\r\n        if (event.doubleclick)\r\n            player.previous()\r\n        else\r\n            player.rewind(5)\n"})})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>i});var t=n(6540);const s={},r=t.createContext(s);function o(e){const a=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:a},e.children)}}}]);
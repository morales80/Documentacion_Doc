"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3976],{2053:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>t});const o=JSON.parse('{"id":"intro","title":"PATRONES DE DISE\xd1O","description":"Los patrones de dise\xf1o (design patterns) son soluciones","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/Documentacion_Doc/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Builder","permalink":"/Documentacion_Doc/docs/Builder"}}');var a=n(4848),r=n(8453);const i={sidebar_position:1},l="PATRONES DE DISE\xd1O",d={},t=[{value:"Historia de los patrones",id:"historia-de-los-patrones",level:3},{value:"Ventajas",id:"ventajas",level:3},{value:"\xbfPara que sirven?",id:"para-que-sirven",level:3},{value:"\xbfQu\xe9 aportan los patrones de dise\xf1o?",id:"qu\xe9-aportan-los-patrones-de-dise\xf1o",level:3},{value:"\xbfPor qu\xe9 son importantes?",id:"por-qu\xe9-son-importantes",level:3},{value:"Tipos de Patrones de Dise\xf1o",id:"tipos-de-patrones-de-dise\xf1o",level:3},{value:"1. Patrones Creacionales",id:"1-patrones-creacionales",level:4},{value:"2. Patrones Estructurales",id:"2-patrones-estructurales",level:4},{value:"3. Patrones de Comportamiento",id:"3-patrones-de-comportamiento",level:4},{value:"Aplicaciones en Proyectos Reales",id:"aplicaciones-en-proyectos-reales",level:3},{value:"Errores Comunes al implementar Patrones de Dise\xf1o",id:"errores-comunes-al-implementar-patrones-de-dise\xf1o",level:3}];function c(e){const s={blockquote:"blockquote",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"patrones-de-dise\xf1o",children:"PATRONES DE DISE\xd1O"})}),"\n",(0,a.jsx)(s.p,{children:"Los patrones de dise\xf1o (design patterns) son soluciones\r\nhabituales a problemas comunes en el dise\xf1o de\r\nsoftware. Cada patr\xf3n es como un plano que se\r\npuede personalizar para resolver un problema de\r\ndise\xf1o particular de tu c\xf3digo.."}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{src:"https://binnariumedu.com/images/1.png",alt:"Texto alternativo",title:"T\xedtulo alternativo"})}),"\n",(0,a.jsx)(s.h3,{id:"historia-de-los-patrones",children:"Historia de los patrones"}),"\n",(0,a.jsx)(s.p,{children:"El concepto de los patrones fue descrito por Christopher Alexander en El lenguaje de patrones. El libro habla de un \u201clenguaje\u201d para dise\xf1ar el entorno urbano. Las unidades de este lenguaje son los patrones. Pueden describir lo altas que tienen que ser las ventanas, cu\xe1ntos niveles debe tener un edificio, cuan grandes deben ser las zonas verdes de un barrio, etc\xe9tera."}),"\n",(0,a.jsx)(s.p,{children:"La idea fue recogida por cuatro autores: Erich Gamma, John Vlissides, Ralph Johnson y Richard Helm. En 1995, publicaron Patrones de dise\xf1o, en el que aplicaron el concepto de los patrones de dise\xf1o a la programaci\xf3n. El libro presentaba 23 patrones que resolv\xedan varios problemas del dise\xf1o orientado a objetos y se convirti\xf3 en un \xe9xito de ventas con rapidez. Al tener un t\xedtulo tan largo en ingl\xe9s, la gente empez\xf3 a llamarlo \u201cel libro de la \u2018gang of four\u2019 (banda de los cuatro)\u201d, lo que pronto se abrevi\xf3 a \u201cel libro GoF\u201d."}),"\n",(0,a.jsx)(s.p,{children:"Desde entonces se han descubierto decenas de nuevos patrones orientados a objetos. La \u201cmetodolog\xeda del patr\xf3n\u201d se hizo muy popular en otros campos de la programaci\xf3n, por lo que hoy en d\xeda existen muchos otros patrones no relacionados con el dise\xf1o orientado a objetos"}),"\n",(0,a.jsx)(s.h3,{id:"ventajas",children:"Ventajas"}),"\n",(0,a.jsx)(s.p,{children:"Los patrones son un juego de herramientas que\r\nbrindan soluciones a problemas habituales\r\nen el dise\xf1o de software. Definen un\r\nlenguaje com\xfan que ayuda a tu\r\nequipo a comunicarse\r\ncon m\xe1s eficiencia."}),"\n",(0,a.jsx)(s.p,{children:"Pues ni m\xe1s ni menos son formas \u201cestandarizadas\u201d de resolver problemas comunes de dise\xf1o en el desarrollo de software."}),"\n",(0,a.jsx)(s.p,{children:"Las ventajas del uso de patrones son evidentes:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Conforman un amplio cat\xe1logo de problemas y soluciones"}),"\n",(0,a.jsx)(s.li,{children:"Estandarizan la resoluci\xf3n de determinados problemas"}),"\n",(0,a.jsx)(s.li,{children:"Condensan y simplifican el aprendizaje de las buenas pr\xe1cticas"}),"\n",(0,a.jsx)(s.li,{children:"Proporcionan un vocabulario com\xfan entre desarrolladores"}),"\n",(0,a.jsx)(s.li,{children:"Evitan \u201creinventar la rueda\u201d"}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"para-que-sirven",children:"\xbfPara que sirven?"}),"\n",(0,a.jsx)(s.p,{children:"Cuando comenzamos a desarrollar software, es normal que cada persona emplee su propia l\xf3gica y experiencia para escribir c\xf3digo. Esto puede dar lugar a sistemas complejos que son dif\xedciles de entender, mantener o mejorar, especialmente si el desarrollador original no est\xe1 disponible."}),"\n",(0,a.jsx)(s.p,{children:"Para solucionar este desaf\xedo, surgen los patrones de dise\xf1o, que son modelos o soluciones probadas que sirven como gu\xedas para estructurar el c\xf3digo de manera clara y efectiva."}),"\n",(0,a.jsx)(s.h3,{id:"qu\xe9-aportan-los-patrones-de-dise\xf1o",children:"\xbfQu\xe9 aportan los patrones de dise\xf1o?"}),"\n",(0,a.jsx)(s.p,{children:"Un patr\xf3n de dise\xf1o facilita la creaci\xf3n de m\xf3dulos que otros programadores pueden entender f\xe1cilmente y mejorar sin necesidad de reconstruir todo desde cero. Al adoptar estos modelos, los equipos de desarrollo pueden:"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Estandarizar el lenguaje entre programadores: Ofrecen un vocabulario com\xfan para describir problemas y soluciones, mejorando la comunicaci\xf3n en los equipos."}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Evitar reinventar la rueda: Ahorran tiempo al usar soluciones ya conocidas y probadas para problemas recurrentes, lo que reduce errores y acelera el desarrollo."}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Promover la reusabilidad del c\xf3digo: Fomentan la creaci\xf3n de componentes modulares y reutilizables que pueden ser aplicados en diferentes proyectos o escenarios."}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["\n",(0,a.jsx)(s.p,{children:"Facilitar el mantenimiento y escalabilidad: Al estructurar el c\xf3digo de forma organizada, los patrones permiten que sea m\xe1s sencillo de modificar o ampliar seg\xfan cambien las necesidades del proyecto."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"por-qu\xe9-son-importantes",children:"\xbfPor qu\xe9 son importantes?"}),"\n",(0,a.jsx)(s.p,{children:"Aprender y aplicar patrones de dise\xf1o es esencial para cualquier programador que aspire a escribir c\xf3digo de calidad. En un mundo ideal, los programadores deber\xedan aprender primero la sintaxis de un lenguaje y luego familiarizarse con los patrones de dise\xf1o, ya que estos act\xfaan como una hoja de ruta para resolver problemas de manera profesional y est\xe1ndar."}),"\n",(0,a.jsx)(s.p,{children:"Adoptar patrones de dise\xf1o no solo mejora tus habilidades t\xe9cnicas, sino que tambi\xe9n te convierte en un mejor colaborador dentro de un equipo, aumentando tus oportunidades de \xe9xito en el desarrollo de software."}),"\n",(0,a.jsx)(s.h3,{id:"tipos-de-patrones-de-dise\xf1o",children:"Tipos de Patrones de Dise\xf1o"}),"\n",(0,a.jsx)(s.p,{children:"Los patrones de dise\xf1o son modelos probados que ayudan a resolver problemas comunes en el desarrollo de software. Estos se agrupan en tres categor\xedas principales, dependiendo del tipo de problema que resuelven:"}),"\n",(0,a.jsx)(s.h4,{id:"1-patrones-creacionales",children:"1. Patrones Creacionales"}),"\n",(0,a.jsx)(s.p,{children:"Estos patrones est\xe1n dise\xf1ados para abordar problemas relacionados con la creaci\xf3n de instancias de objetos, permitiendo delegar esta responsabilidad de manera eficiente. Sus principales objetivos son encapsular el conocimiento de las clases y ocultar c\xf3mo se crean o instancian los objetos."}),"\n",(0,a.jsx)(s.p,{children:"Ejemploss de patrones creacionales:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Singleton:"})," Garantiza que una clase tenga una \xfanica instancia en todo el programa."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Prototype:"})," Permite clonar instancias ya existentes, ideal para evitar la creaci\xf3n repetitiva de objetos similares."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Abstract Factory:"})," Proporciona una interfaz para crear familias de objetos relacionados sin especificar sus clases concretas."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Builder:"})," Facilita la construcci\xf3n de objetos complejos mediante pasos definidos, mejorando la legibilidad y escalabilidad."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Factory Method:"})," Proporciona un m\xe9todo para crear objetos bas\xe1ndose en el tipo requerido."]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"2-patrones-estructurales",children:"2. Patrones Estructurales"}),"\n",(0,a.jsx)(s.p,{children:"Estos patrones se centran en la composici\xf3n y estructura de clases y objetos, definiendo c\xf3mo se relacionan entre s\xed para formar sistemas complejos."}),"\n",(0,a.jsx)(s.p,{children:"Ejemplos de patrones estructurales:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Bridge (Puente):"})," Separa la abstracci\xf3n de la implementaci\xf3n, facilitando su evoluci\xf3n independiente."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Decorator (Decorador):"})," A\xf1ade funcionalidades a un objeto de forma din\xe1mica sin modificar su estructura base."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Facade (Fachada):"})," Ofrece una interfaz simple para interactuar con sistemas complejos."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Adapter:"})," Permite que dos clases incompatibles trabajen juntas al actuar como intermediario."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Composite:"})," Facilita el trabajo con objetos jer\xe1rquicos al tratarlos de manera uniforme."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Flyweight:"})," Optimiza el uso de recursos compartiendo objetos similares para reducir el consumo de memoria."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Proxy:"})," Introduce un intermediario que controla el acceso a un objeto, \xfatil por razones de seguridad o complejidad."]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"3-patrones-de-comportamiento",children:"3. Patrones de Comportamiento"}),"\n",(0,a.jsx)(s.p,{children:"Resuelven problemas relacionados con la interacci\xf3n y las responsabilidades de las clases y objetos, mejorando la comunicaci\xf3n entre ellos."}),"\n",(0,a.jsx)(s.p,{children:"Ejemplos de patrones de comportamiento:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Observer (Observador):"})," Establece un sistema de notificaciones entre objetos, donde uno informa a varios de sus cambios."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Chain of Responsibility:"})," Organiza objetos en cadena para manejar solicitudes, donde cada objeto decide si act\xfaa o pasa la solicitud."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Command:"})," Encapsula acciones como objetos, permitiendo su ejecuci\xf3n y almacenamiento para uso posterior."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Iterator:"})," Proporciona una manera uniforme de recorrer colecciones de objetos."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Mediator:"})," Centraliza la comunicaci\xf3n entre objetos, reduciendo sus dependencias mutuas."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Memento:"})," Permite guardar y restaurar estados anteriores de un objeto."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"State:"})," Modifica el comportamiento de un objeto en funci\xf3n de su estado interno."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Strategy:"})," Define una familia de algoritmos, permitiendo elegir uno din\xe1micamente seg\xfan las necesidades."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Template Method:"})," Proporciona una estructura para resolver problemas reutilizando pasos comunes."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Visitor:"})," Permite definir operaciones nuevas sin modificar las estructuras de datos subyacentes."]}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{src:"https://profile.es/wp-content/media/Patrones-de-diseno-de-software.png",alt:""})}),"\n",(0,a.jsx)(s.h3,{id:"aplicaciones-en-proyectos-reales",children:"Aplicaciones en Proyectos Reales"}),"\n",(0,a.jsx)(s.p,{children:"Los patrones de dise\xf1o se utilizan ampliamente en proyectos de software reales para resolver problemas comunes de manera eficiente. Algunos ejemplos incluyen:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Factory Method:"})," En sistemas de gesti\xf3n de contenido (CMS), donde cada tipo de contenido (p\xe1ginas, art\xedculos, blogs) puede ser creado utilizando un m\xe9todo de f\xe1brica, garantizando que se sigan las reglas y estructuras correctas."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Observer:"})," En aplicaciones de redes sociales, donde los usuarios se suscriben a eventos o actualizaciones de otros usuarios (por ejemplo, recibir notificaciones cuando alguien publica una actualizaci\xf3n)."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Decorator:"})," En sistemas de pago en l\xednea, donde los m\xe9todos de pago pueden ser extendidos con funcionalidades adicionales (como descuentos, impuestos, opciones de env\xedo) sin modificar las clases originales."]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"errores-comunes-al-implementar-patrones-de-dise\xf1o",children:"Errores Comunes al implementar Patrones de Dise\xf1o"}),"\n",(0,a.jsx)(s.p,{children:"A la hora de implementar patrones de dise\xf1o, es importante evitar algunos errores comunes:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Sobrecarga de patrones:"})," Usar patrones innecesarios cuando una soluci\xf3n m\xe1s simple es suficiente. No es necesario aplicar un patr\xf3n solo por el hecho de usar uno."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Patrones mal aplicados:"})," Implementar un patr\xf3n sin comprender sus beneficios o sin tener en cuenta el contexto puede resultar en un dise\xf1o innecesariamente complejo."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"No adaptar los patrones:"})," Aplicar un patr\xf3n de manera r\xedgida sin considerar el contexto espec\xedfico del proyecto puede generar un dise\xf1o ineficiente."]}),"\n"]}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.em,{children:(0,a.jsx)(s.em,{children:'Los patrones de dise\xf1o son soluciones a problemas comunes en el proceso de dise\xf1ar software. Son como "planos" ya hechos que se pueden ajustar a problemas recurrentes en el dise\xf1o de tu c\xf3digo'})})}),"\n",(0,a.jsx)(s.p,{children:(0,a.jsx)(s.img,{src:"https://preview.redd.it/mhw8mdskn1w41.gif?width=480&auto=webp&s=d19ff2c6c0f67c2d927765268345cfba9201d4c3",alt:""})}),"\n"]}),"\n",(0,a.jsxs)(s.blockquote,{children:["\n",(0,a.jsx)(s.p,{children:"En esencia, los patrones de dise\xf1o no son recetas m\xe1gicas, sino herramientas poderosas que permiten escribir c\xf3digo de calidad profesional. Al aplicar estas soluciones probadas, los desarrolladores pueden enfrentar desaf\xedos comunes con confianza, mejorar la colaboraci\xf3n en equipo y crear software robusto y escalable. Aprender a utilizarlos es un paso clave para evolucionar como programador y optimizar el proceso de desarrollo."}),"\n"]})]})}function u(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>l});var o=n(6540);const a={},r=o.createContext(a);function i(e){const s=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(r.Provider,{value:s},e.children)}}}]);